/* 
 * File:   server.h
 *      Defines a set of server (mpi master) side functions and types.
 *      
 * Author: TBD
 *
 * 
 * Created on 13. Januar 2015, 11:29
 */

#ifndef SERVER_H
#define	SERVER_H
#include "core_headers.h"
#ifdef	__cplusplus
extern "C" {
#endif
    
    /**
     * Type definition for client configuration information.
     */
    struct ClientConfig {
        /**
         * The client IP address or host name.
         */
        char* clientAddress;
        /**
         * The number of tasks the client will execute.
         */
        int numTasks;
    };
    
    typedef struct ClientConfig ClientConfig;
    
    
     /**
     * Function pointer definition for providing the list of hashes to search the passwords for. 
     * The <code>sorceReference</code> can have an arbitrary format, but it's recommended to use like a resource identifier (URI).
     */
    typedef ClientConfig* (*ClientConfigSourceReferenceHandler)(char* configSorceReference);
    
    /**
     * Function pointer definition for providing the list of hashes to search the passwords for. 
     * The <code>sorceReference</code> can have an arbitrary format, but it's recommended to use like a resource identifier (URI).
     */
    typedef char* (*HashSourceReferenceHandler)(char* hashListSorceReference);
    /**
     * Type definition for server meta data.
     */
    struct ServerContext{
        /**
         * The number of clients used by the server.
         */
        int numClients;
        /**
         * A resource identifier for obtaining target hashes.
         */
        char* hashesSourceReference;
        /**
         */
        char* clientListSourceReference;
        /**
         * The <code>SourceReferenceHandler</code> function used to retrieve the data from <code>sourceReference</code>
         */
        HashSourceReferenceHandler handlerCallback;
        /**
         * The first password to be generated by one of the clients.
         */
        char* startPassword;
        /**
         * The last password to be generated by one of the clients.
         */
        char* endPassword;
        /**
         * The alphabet to be used to generate new passwords. p &isin; A*  <br>( p -> new password; A ->  alphabet)
         */
        char* alphabet;
       
    };
    
    typedef struct ServerContext ServerContext;
    
    /**
     * Executes server bootstrap
     * @return An initialized <code>ServerContext</code>.
     */
    ServerContext* initialize();
    
    //void receiveSer <-- what means this?
    
    


#ifdef	__cplusplus
}
#endif

#endif	/* SERVER_H */

