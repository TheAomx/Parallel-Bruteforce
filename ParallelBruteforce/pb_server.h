/* 
 * File:   server.h
 *      Defines a set of server (mpi master) side functions and types.
 *      
 * Author: TBD
 *
 * 
 * Created on 13. Januar 2015, 11:29
 */

#ifndef PB_SERVER_H
#define	PB_SERVER_H

#ifdef	__cplusplus
extern "C" {
#endif

    enum PwGenAlgoType {
        DEFAULT
    };
    
    typedef enum PwGenAlgoType PwGenAlgoType;
    
    typedef void (*PasswordCountCallback)(char* in, char* out);
    typedef ulong (*PasswordAbsDiffCallback)(char* pw1, char* pw2);
    typedef ulong (*PasswordValueCallback)(char* pass);
    typedef ulong (*PasswordAtIndexCallback)(long passIndex);
    
    
    
    struct passwordGenerationContext{
        PwGenAlgoType type;
        char* alphabet;
        PasswordCountCallback nextPassword;
        PasswordAbsDiffCallback passwordDiff;
        PasswordValueCallback valueOf;
        PasswordAtIndexCallback passwordAt;
        
    };
    typedef struct passwordGenerationContext PasswordGenerationContext;

    struct clientTask {
        enum PwGenAlgoType pwAlgoType;
        char* startPass;
        char* endPass;
        ulong numPass;
    };

    typedef struct clientTask  ClientTask;
    
    /**
     * Type definition for server meta data.
     */
    struct ServerContext {
        /**
         * The number of clients used by the server.
         */
        int numClients;
        /**
         * The first password to be generated by one of the clients.
         */
        char* startPassword;
        /**
         * The last password to be generated by one of the clients.
         */
        char* endPassword;
        
        ClientTask* tasks;
        
        PwGenAlgoType type;

        long numPasswords;

      

    };

   
    
    typedef struct ServerContext ServerContext;


    ServerContext* initializeWithPW(int numWorkers, char* startPW, char* endPW);
    ServerContext* initializeWithLenght(int numWorkers, char* startPW, ulong numPasswords);
    /**
     * Counts up a given password using the default alphabet.
     * @param in The input password.
     * @param outPass The output password. Caller must take care of allocation (may defer in length by one) and cleaning up.
     */
    void nextPass(char* in, char* outPass);

    /**
     * Get the index number for a given <code>string</code> using the default <code>alphabet</code>.
     * @param string The input to convert to a number.
     * @return The counting index number of the given <code>string</code>. 
     * It can be considered as an index value of the <code>string</code> within the password generation algorithm's generation index.
     * (That is, the input of 'aaaa' and 'aa' produce different results.)
     */
    ulong toNumberIndefaultAlphabet(char* string);

    /**
     * Calculate the number of elements between <code>pw1</code> and <code>pw2</code>
     * @param pw1
     * @param pw2
     * @return 
     */
    ulong getPasswordDiff(char* pw1, char* pw2);


    /**
     * Calculates the password which has <code>targetDifference</code> elements from <code>offsetPW</code>.
     * Or <code>result - offsetPW = targetDifference</code>
     * @param offsetPw Input. 
     * @param targetDifference The number of elements between in and out.
     * @param result Output.
     */
    void getPasswordAtRelativeOffset(char* offsetPw, ulong targetDifference, char* result);

    
    void getPasswordAt(ulong passwordIndex, char* result);
    
    void printServerContext(ServerContext* ctx);
    
    PasswordGenerationContext* createPasswordGenerationContextByType(PwGenAlgoType type);
    PasswordGenerationContext* createPasswordGenerationContextByName(char* typeName);

#ifdef	__cplusplus
}
#endif

#endif	/* PB_SERVER_H */

